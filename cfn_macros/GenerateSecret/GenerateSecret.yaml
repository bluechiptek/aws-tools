AWSTemplateFormatVersion: 2010-09-09
Resources:
  MacroExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  MacroFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import secrets
          import string

          def generate_secret(length=16, upper=True, lower=True,
                              number=True, special=True, exclude=None):
              valid_chars = []
              conditions = 0
              if upper:
                  valid_chars.extend(string.ascii_uppercase)
                  conditions += 1
              if lower:
                  valid_chars.extend(string.ascii_lowercase)
                  conditions += 1
              if number:
                  valid_chars.extend(string.digits)
                  conditions += 1
              if special:
                  valid_chars.extend(string.punctuation)
                  conditions += 1
              if exclude:
                  for char in list(exclude):
                      valid_chars.remove(char)
              if conditions > length:
                  raise RuntimeError(
                      "Unable to generate secret with {} conditions "
                      "and {} length".format(conditions, length)
                  )
              while True:
                  secret = ''.join([secrets.choice(valid_chars) for _ in range(length)])
                  secret_set = set(secret)
                  if upper:
                      if not secret_set.intersection(set(string.ascii_uppercase)):
                          continue
                  if lower:
                      if not secret_set.intersection(set(string.ascii_lowercase)):
                          continue
                  if number:
                      if not secret_set.intersection(set(string.digits)):
                          continue
                  if special:
                      if not secret_set.intersection(set(string.punctuation)):
                          continue
                  break
              return secret

          def handler(event, context):
              print(event)
              params = {k.lower(): v for k, v in event['params'].items()}
              response = {
                  "requestId": event["requestId"],
                  "status": "success",
                  "fragment": generate_secret(**params)
              }
              print(response)
              return response

      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt MacroExecutionRole.Arn

  Macro:
    Type: AWS::CloudFormation::Macro
    Properties:
      Name: GenerateSecret
      Description: Generates a random secret
      FunctionName: !GetAtt MacroFunction.Arn
